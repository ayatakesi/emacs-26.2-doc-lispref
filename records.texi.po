# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-10-19 06:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: original_texis/records.texi:8
msgid ""
"@c -*-texinfo-*- @c This is part of the GNU Emacs Lisp Reference Manual.  @c "
"Copyright (C) 2017-2019 Free Software Foundation, Inc.  @c See the file "
"elisp.texi for copying conditions.  @node Records @chapter Records @cindex "
"records"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:13
#, no-wrap
msgid ""
"  The purpose of records is to allow programmers to create objects\n"
"with new types that are not built into Emacs.  They are used as the\n"
"underlying representation of @code{cl-defstruct} and @code{defclass}\n"
"instances.\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:21
#, no-wrap
msgid ""
"  Internally, a record object is much like a vector; its slots can be\n"
"accessed using @code{aref} and it can be copied using\n"
"@code{copy-sequence}.  However, the first slot is used to hold its\n"
"type as returned by @code{type-of}.  Also, in the current\n"
"implementation records can have at most 4096 slots, whereas vectors\n"
"can be much larger.  Like arrays, records use zero-origin indexing:\n"
"the first slot has index 0.\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:25
#, no-wrap
msgid ""
"  The type slot should be a symbol or a type descriptor.  If it's a\n"
"type descriptor, the symbol naming its type will be returned;\n"
"@ref{Type Descriptors}.  Any other kind of object is returned as-is.\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:29
#, no-wrap
msgid ""
"  The printed representation of records is @samp{#s} followed by a\n"
"list specifying the contents.  The first list element must be the\n"
"record type.  The following elements are the record slots.\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:36
#, no-wrap
msgid ""
"  To avoid conflicts with other type names, Lisp programs that define\n"
"new types of records should normally use the naming conventions of the\n"
"package where these record types are introduced for the names of the\n"
"types.  Note that the names of the types which could possibly conflict\n"
"might not be known at the time the package defining a record type is\n"
"loaded; they could be loaded at some future point in time.\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:40
#, no-wrap
msgid ""
"  A record is considered a constant for evaluation: the result of\n"
"evaluating it is the same record.  This does not evaluate or even\n"
"examine the slots.  @xref{Self-Evaluating Forms}.\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:45
#, no-wrap
msgid ""
"@menu\n"
"* Record Functions::        Functions for records.\n"
"* Backward Compatibility::  Compatibility for cl-defstruct.\n"
"@end menu\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:48
msgid "@node Record Functions @section Record Functions"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:51
msgid ""
"@defun recordp object This function returns @code{t} if @var{object} is a "
"record."
msgstr ""

#. type: Plain text
#: original_texis/records.texi:59
#, no-wrap
msgid ""
"@example\n"
"@group\n"
"(recordp #s(a))\n"
"     @result{} t\n"
"@end group\n"
"@end example\n"
"@end defun\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:63
msgid ""
"@defun record type &rest objects This function creates and returns a record "
"whose type is @var{type} and remaining slots are the rest of the arguments, "
"@var{objects}."
msgstr ""

#. type: Plain text
#: original_texis/records.texi:71
#, no-wrap
msgid ""
"@example\n"
"@group\n"
"(record 'foo 23 [bar baz] \"rats\")\n"
"     @result{} #s(foo 23 [bar baz] \"rats\")\n"
"@end group\n"
"@end example\n"
"@end defun\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:75
msgid ""
"@defun make-record type length object This function returns a new record "
"with type @var{type} and @var{length} more slots, each initialized to "
"@var{object}."
msgstr ""

#. type: Plain text
#: original_texis/records.texi:83
#, no-wrap
msgid ""
"@example\n"
"@group\n"
"(setq sleepy (make-record 'foo 9 'Z))\n"
"     @result{} #s(foo Z Z Z Z Z Z Z Z Z)\n"
"@end group\n"
"@end example\n"
"@end defun\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:86
msgid "@node Backward Compatibility @section Backward Compatibility"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:92
#, no-wrap
msgid ""
"  Code compiled with older versions of @code{cl-defstruct} that\n"
"doesn't use records may run into problems when used in a new Emacs.\n"
"To alleviate this, Emacs detects when an old @code{cl-defstruct} is\n"
"used, and enables a mode in which @code{type-of} handles old struct\n"
"objects as if they were records.\n"
msgstr ""

#. type: Plain text
#: original_texis/records.texi:96
msgid ""
"@defun cl-old-struct-compat-mode arg If @var{arg} is positive, enable "
"backward compatibility with old-style structs.  @end defun"
msgstr ""
